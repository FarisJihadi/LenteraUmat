import React, { useEffect, useState, useContext, useRef } from "react";
import { axiosInstance } from "../config";
import Swal from "sweetalert2";
import { UserContext } from "../context/UserContext";
import { FaPaperPlane, FaRobot, FaUser, FaFilePdf, FaQuestionCircle, FaBookOpen, FaSpinner, FaCopy, FaDownload } from "react-icons/fa"; // Tambah FaCopy, FaDownload
import * as pdfjs from "pdfjs-dist";
import { jsPDF } from "jspdf"; // Import jsPDF

// Pastikan workerSrc diarahkan ke file worker dari pdfjs-dist.
// Ini adalah langkah KRITIS. Pastikan Anda telah menyalin `pdf.worker.min.js`
// dari `node_modules/pdfjs-dist/build/` ke folder `public/pdf-worker/` di proyek Anda.
pdfjs.GlobalWorkerOptions.workerSrc = "/pdf-worker/pdf.worker.min.js";

export default function UmmahPartner() {
  const { user } = useContext(UserContext);
  const chatContainerRef = useRef(null); // Ref untuk scroll otomatis chat

  // State untuk mode dan input chat
  const [currentMode, setCurrentMode] = useState("chat"); // 'chat', 'askPdf', 'summarizePdf', 'quiz'
  const [chatHistory, setChatHistory] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false); // Untuk indikator loading API Gemini

  // State untuk fitur PDF
  const [materis, setMateris] = useState([]); // Daftar materi dari database
  const [selectedMateriId, setSelectedMateriId] = useState("");
  const [selectedMateriLink, setSelectedMateriLink] = useState("");
  const [pdfTextContent, setPdfTextContent] = useState(""); // Teks yang diekstrak dari PDF
  const [isPdfProcessing, setIsPdfProcessing] = useState(false); // Untuk indikator loading proses PDF
  const [askPdfQuestion, setAskPdfQuestion] = useState(""); // Pertanyaan untuk Ask PDF

  // State untuk fitur Kuis
  const [quizType, setQuizType] = useState("multipleChoice"); // 'multipleChoice' atau 'fillInTheBlank'
  const [numQuestions, setNumQuestions] = useState(3); // Jumlah pertanyaan kuis
  const [quizQuestions, setQuizQuestions] = useState([]); // Hasil kuis yang digenerate

  // --- Efek Samping ---

  // Scroll ke bawah setiap kali chatHistory berubah
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory]);

  // Ambil daftar materi saat komponen dimuat
  useEffect(() => {
    const fetchMateris = async () => {
      try {
        const res = await axiosInstance.get("/materi/getall");
        setMateris(res.data);
      } catch (err) {
        console.error("Gagal memuat daftar materi:", err);
        Swal.fire("Error", "Gagal memuat daftar materi. Silakan coba lagi.", "error");
      }
    };
    fetchMateris();
  }, []);

  // Ketika materi dipilih, proses PDF-nya
  useEffect(() => {
    const materi = materis.find((m) => m._id === selectedMateriId);
    if (materi) {
      setSelectedMateriLink(materi.linkMateri);
      processPdf(materi.linkMateri);
    } else {
      setSelectedMateriLink("");
      setPdfTextContent("");
    }
  }, [selectedMateriId, materis]);

  // --- Fungsi Utilitas ---

  // Fungsi untuk mengekstrak teks dari PDF menggunakan pdfjs-dist
  const processPdf = async (pdfUrl) => {
    if (!pdfUrl) {
      setPdfTextContent("");
      return;
    }
    setIsPdfProcessing(true);
    setPdfTextContent(""); // Reset content
    try {
      const loadingTask = pdfjs.getDocument(pdfUrl);
      const pdf = await loadingTask.promise;
      let fullText = "";
      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const textContent = await page.getTextContent();
        fullText += textContent.items.map((item) => item.str).join(" ") + "\n";
      }
      setPdfTextContent(fullText);
    } catch (err) {
      console.error("Gagal memproses PDF:", err);
      Swal.fire("Error", "Gagal mengekstrak teks dari PDF. Pastikan URL PDF valid dan dapat diakses.", "error");
      setPdfTextContent("Gagal mengekstrak teks dari PDF.");
    } finally {
      setIsPdfProcessing(false);
    }
  };

  // Fungsi untuk memanggil Gemini API
  const callGeminiApi = async (promptContent, schema = null) => {
    setIsLoading(true);
    let chatHistoryToSend = [];
    if (currentMode === "chat") {
      chatHistoryToSend = [...chatHistory, { role: "user", parts: [{ text: promptContent }] }];
    } else {
      // Untuk fitur PDF, kita hanya mengirim prompt saat ini
      chatHistoryToSend = [{ role: "user", parts: [{ text: promptContent }] }];
    }

    const payload = {
      contents: chatHistoryToSend,
    };

    if (schema) {
      payload.generationConfig = {
        responseMimeType: "application/json",
        responseSchema: schema,
      };
    }

    const apiKey = "AIzaSyCh6EAMccK82g-VqX4dOr1kVGYmACK6wkM"; // API key akan diinject oleh Canvas
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const result = await response.json();

      if (!response.ok) {
        // Jika respons HTTP bukan 2xx
        console.error("API response not OK (status:", response.status, "):", result);
        throw new Error(`API request failed with status ${response.status}: ${JSON.stringify(result)}`);
      }

      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        return text;
      } else {
        console.error("Unexpected API response structure:", result);
        throw new Error("Respon API tidak sesuai format.");
      }
    } catch (error) {
      console.error("Error calling Gemini API:", error);
      Swal.fire("Error", `Terjadi kesalahan saat berkomunikasi dengan AI: ${error.message}. Silakan coba lagi.`, "error");
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  // --- Handler Chat Umum ---

  const handleGeneralChatSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;

    const userMessage = { role: "user", parts: [{ text: inputMessage }] };
    setChatHistory((prev) => [...prev, userMessage]);
    setInputMessage("");

    const modelResponse = await callGeminiApi(inputMessage);

    if (modelResponse) {
      setChatHistory((prev) => [...prev, { role: "model", parts: [{ text: modelResponse }] }]);
    }
  };

  // --- Handler Fitur PDF ---

  const handleAskPdfSubmit = async (e) => {
    e.preventDefault();
    if (!selectedMateriId || !askPdfQuestion.trim() || !pdfTextContent.trim()) {
      Swal.fire("Peringatan", "Pilih materi dan masukkan pertanyaan.", "warning");
      return;
    }

    const prompt = `Berdasarkan teks PDF berikut:\n\n${pdfTextContent}\n\nJawab pertanyaan ini: ${askPdfQuestion}`;
    setChatHistory((prev) => [...prev, { role: "user", parts: [{ text: `[Tanya PDF] Materi: ${materis.find((m) => m._id === selectedMateriId)?.judulMateri}\nPertanyaan: ${askPdfQuestion}` }] }]);
    setAskPdfQuestion("");

    const modelResponse = await callGeminiApi(prompt);

    if (modelResponse) {
      setChatHistory((prev) => [...prev, { role: "model", parts: [{ text: modelResponse }] }]);
    }
  };

  const handleSummarizePdf = async () => {
    if (!selectedMateriId || !pdfTextContent.trim()) {
      Swal.fire("Peringatan", "Pilih materi untuk diringkas.", "warning");
      return;
    }

    const prompt = `Ringkas teks PDF berikut dalam format poin-poin penting:\n\n${pdfTextContent}`;
    setChatHistory((prev) => [...prev, { role: "user", parts: [{ text: `[Ringkas PDF] Materi: ${materis.find((m) => m._id === selectedMateriId)?.judulMateri}` }] }]);

    const modelResponse = await callGeminiApi(prompt);

    if (modelResponse) {
      setChatHistory((prev) => [...prev, { role: "model", parts: [{ text: modelResponse }] }]);
    }
  };

  // --- Handler Kuis ---

  const handleGenerateQuiz = async () => {
    if (!selectedMateriId || !pdfTextContent.trim()) {
      Swal.fire("Peringatan", "Pilih materi untuk membuat kuis.", "warning");
      return;
    }

    setQuizQuestions([]); // Reset quiz questions

    let prompt = `Buatkan kuis tentang materi berikut. Format output harus JSON.
    Materi: ${pdfTextContent}\n\n`;

    const quizSchema = {
      type: "ARRAY",
      items: {
        type: "OBJECT",
        properties: {
          question: { type: "STRING" },
          type: { type: "STRING", enum: ["multipleChoice", "fillInTheBlank"] },
          options: {
            type: "ARRAY",
            items: { type: "STRING" },
          },
          answer: { type: "STRING" },
        },
        required: ["question", "type", "answer"],
      },
    };

    if (quizType === "multipleChoice") {
      prompt += `Buat ${numQuestions} pertanyaan pilihan ganda dengan 4 opsi dan 1 jawaban benar.`;
      quizSchema.items.properties.options.minItems = 4;
      quizSchema.items.properties.options.maxItems = 4;
    } else {
      // fillInTheBlank
      prompt += `Buat ${numQuestions} pertanyaan isian singkat.`;
      delete quizSchema.items.properties.options; // Hapus opsi untuk isian
    }

    setChatHistory((prev) => [...prev, { role: "user", parts: [{ text: `[Generate Kuis] Materi: ${materis.find((m) => m._id === selectedMateriId)?.judulMateri}, Tipe: ${quizType}, Jumlah: ${numQuestions}` }] }]);

    const jsonResponse = await callGeminiApi(prompt, quizSchema);

    if (jsonResponse) {
      try {
        const parsedQuiz = JSON.parse(jsonResponse);
        setQuizQuestions(parsedQuiz);
        setChatHistory((prev) => [...prev, { role: "model", parts: [{ text: "Kuis berhasil dibuat!" }] }]);
      } catch (e) {
        console.error("Gagal memparsing respon kuis:", e);
        Swal.fire("Error", "Gagal membuat kuis. Respon AI tidak valid.", "error");
        setChatHistory((prev) => [...prev, { role: "model", parts: [{ text: "Maaf, gagal membuat kuis. Silakan coba lagi." }] }]);
      }
    }
  };

  // --- Fungsi Salin Chat ---
  const handleCopyChat = (textToCopy) => {
    // Menggunakan document.execCommand('copy') karena navigator.clipboard.writeText()
    // mungkin tidak berfungsi dalam lingkungan iframe
    const textarea = document.createElement("textarea");
    textarea.value = textToCopy;
    document.body.appendChild(textarea);
    textarea.select();
    try {
      document.execCommand("copy");
      Swal.fire({
        icon: "success",
        title: "Disalin!",
        text: "Teks berhasil disalin ke clipboard.",
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 1500,
      });
    } catch (err) {
      console.error("Gagal menyalin teks: ", err);
      Swal.fire({
        icon: "error",
        title: "Gagal Salin",
        text: "Tidak dapat menyalin teks.",
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 1500,
      });
    }
    document.body.removeChild(textarea);
  };

  // --- Fungsi Download Kuis sebagai PDF ---
  const handleDownloadQuizPdf = () => {
    if (quizQuestions.length === 0) {
      Swal.fire("Peringatan", "Tidak ada kuis untuk diunduh.", "warning");
      return;
    }

    const doc = new jsPDF();
    let yPos = 10;
    const margin = 10;
    const lineHeight = 7;
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const maxTextWidth = pageWidth - 2 * margin; // Lebar teks maksimum yang diizinkan

    doc.setFontSize(18);
    doc.text("Kuis UmmahPartner AI", margin, yPos);
    yPos += 10;
    doc.setFontSize(12);
    doc.text(`Materi: ${materis.find((m) => m._id === selectedMateriId)?.judulMateri || "Tidak Diketahui"}`, margin, yPos);
    yPos += 10;
    doc.text(`Tipe Kuis: ${quizType === "multipleChoice" ? "Pilihan Ganda" : "Isian Singkat"}`, margin, yPos);
    yPos += 15;

    quizQuestions.forEach((q, index) => {
      // Tambahkan nomor pertanyaan
      doc.setFontSize(12);
      const questionNumberText = `${index + 1}. `;
      doc.text(questionNumberText, margin, yPos);

      // Pisahkan pertanyaan panjang menjadi beberapa baris
      const questionLines = doc.splitTextToSize(q.question, maxTextWidth - doc.getTextWidth(questionNumberText));
      doc.text(questionLines, margin + doc.getTextWidth(questionNumberText), yPos);
      yPos += questionLines.length * lineHeight; // Tambahkan tinggi berdasarkan jumlah baris

      if (q.type === "multipleChoice" && q.options) {
        const alphabet = ["A", "B", "C", "D"];
        q.options.forEach((option, optIndex) => {
          const optionPrefix = `   ${alphabet[optIndex]}. `;
          // Pisahkan opsi panjang menjadi beberapa baris
          const optionLines = doc.splitTextToSize(option, maxTextWidth - doc.getTextWidth(optionPrefix));
          doc.text(optionPrefix, margin, yPos);
          doc.text(optionLines, margin + doc.getTextWidth(optionPrefix), yPos);
          yPos += optionLines.length * lineHeight;
        });
      } else if (q.type === "fillInTheBlank") {
        doc.text("   (Isi jawaban di sini)", margin, yPos);
        yPos += lineHeight;
      }

      // Pisahkan jawaban panjang menjadi beberapa baris
      doc.setFontSize(10);
      doc.setTextColor(0, 128, 0); // Warna hijau untuk jawaban
      const answerPrefix = "Jawaban: ";
      const answerLines = doc.splitTextToSize(q.answer, maxTextWidth - doc.getTextWidth(answerPrefix));
      doc.text(answerPrefix, margin, yPos);
      doc.text(answerLines, margin + doc.getTextWidth(answerPrefix), yPos);
      doc.setTextColor(0, 0, 0); // Kembali ke hitam
      yPos += answerLines.length * lineHeight;

      yPos += lineHeight; // Spasi antar pertanyaan

      // Cek apakah perlu halaman baru sebelum pertanyaan berikutnya
      if (yPos + 4 * lineHeight > pageHeight - margin && index < quizQuestions.length - 1) {
        doc.addPage();
        yPos = margin;
      }
    });

    doc.save(`Kuis_${materis.find((m) => m._id === selectedMateriId)?.judulMateri.replace(/\s/g, "_") || "UmmahPartner"}.pdf`);
  };

  // --- FUNGSI FORMATTEXT YANG DIPERBARUI ---
  const formatText = (text) => {
    if (!text) return null;

    let formattedText = text;

    // 1. Ganti **teks** menjadi <strong>teks</strong>
    formattedText = formattedText.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");

    // 2. Ganti *teks* menjadi <em>teks</em>
    formattedText = formattedText.replace(/\*(.*?)\*/g, "<em>$1</em>");

    // 3. Tangani baris baru tunggal menjadi <br />
    // Ini penting untuk menjaga enter dalam paragraf
    formattedText = formattedText.replace(/(?<!\n)\n(?!\n)/g, "<br />");

    // 4. Tangani list item yang dimulai dengan '*' atau '-'
    // Ini akan mengubah baris seperti "* Item 1" atau "- Item 1" menjadi <li>Item 1</li>
    formattedText = formattedText.replace(/^[*-]\s*(.*)$/gm, "<li>$1</li>");

    // 5. Tangani judul/sub-judul yang dimulai dengan '* Judul:'
    // Mengubah '* Tujuan Buku:' menjadi '<p><strong>Tujuan Buku:</strong></p>'
    // Pastikan ini tidak mengganggu list item yang sudah diproses
    formattedText = formattedText.replace(/^\*\s*([A-Za-z\s]+:)/gm, "<p><strong>$1</strong></p>");

    // 6. Bungkus blok <li> dengan <ul>
    // Temukan semua blok <li> yang berurutan dan bungkus dengan <ul>
    formattedText = formattedText.replace(/(<li>.*?<\/li>)+/gs, "<ul>$&</ul>");

    // 7. Ganti baris baru ganda menjadi penutup dan pembuka paragraf
    // Ini akan memisahkan blok teks menjadi paragraf yang berbeda
    formattedText = formattedText
      .split("\n\n")
      .map((block) => {
        // Jika blok sudah dibungkus <ul> atau <p>, biarkan
        if (block.startsWith("<ul>") || block.startsWith("<p>")) {
          return block;
        }
        // Jika tidak, bungkus dengan <p>
        return `<p>${block}</p>`;
      })
      .join("");

    // Hapus ul ganda jika ada (misal: </ul><ul>)
    formattedText = formattedText.replace(/<\/ul>\s*<ul>/g, "");
    // Hapus p ganda jika ada (misal: </p><p>)
    formattedText = formattedText.replace(/<\/p>\s*<p>/g, "");
    // Hapus p kosong
    formattedText = formattedText.replace(/<p><\/p>/g, "");

    return <div dangerouslySetInnerHTML={{ __html: formattedText }} />;
  };
  // --- AKHIR FUNGSI FORMATTEXT YANG DIPERBARUI ---

  return (
    <div className="flex flex-col md:flex-row h-screen bg-gray-100">
      {/* Panel Kontrol Fitur */}
      <div className="w-full md:w-1/3 bg-white p-6 shadow-lg flex flex-col overflow-y-auto">
        <h2 className="text-2xl font-bold text-center text-blue-700 mb-6">UmmahPartner AI</h2>

        {/* Tombol Navigasi Mode */}
        <div className="flex justify-around mb-6 border-b pb-4">
          <button onClick={() => setCurrentMode("chat")} className={`px-4 py-2 rounded-full text-sm font-semibold ${currentMode === "chat" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-700 hover:bg-gray-300"}`}>
            <FaRobot className="inline-block mr-2" /> Chat Umum
          </button>
          <button onClick={() => setCurrentMode("askPdf")} className={`px-4 py-2 rounded-full text-sm font-semibold ${currentMode === "askPdf" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-700 hover:bg-gray-300"}`}>
            <FaFilePdf className="inline-block mr-2" /> Tanya PDF
          </button>
        </div>
        <div className="flex justify-around mb-6 border-b pb-4">
          <button onClick={() => setCurrentMode("summarizePdf")} className={`px-4 py-2 rounded-full text-sm font-semibold ${currentMode === "summarizePdf" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-700 hover:bg-gray-300"}`}>
            <FaBookOpen className="inline-block mr-2" /> Ringkas PDF
          </button>
          <button onClick={() => setCurrentMode("quiz")} className={`px-4 py-2 rounded-full text-sm font-semibold ${currentMode === "quiz" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-700 hover:bg-gray-300"}`}>
            <FaQuestionCircle className="inline-block mr-2" /> Buat Kuis
          </button>
        </div>

        {/* Dropdown Pemilihan Materi (untuk fitur PDF) */}
        {(currentMode === "askPdf" || currentMode === "summarizePdf" || currentMode === "quiz") && (
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">Pilih Materi PDF:</label>
            <select value={selectedMateriId} onChange={(e) => setSelectedMateriId(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
              <option value="">-- Pilih Materi --</option>
              {materis.map((materi) => (
                <option key={materi._id} value={materi._id}>
                  {materi.judulMateri}
                </option>
              ))}
            </select>
            {isPdfProcessing && (
              <p className="text-blue-500 text-sm mt-2 flex items-center">
                <FaSpinner className="animate-spin mr-2" /> Memproses PDF...
              </p>
            )}
            {selectedMateriId && !isPdfProcessing && !pdfTextContent && <p className="text-red-500 text-sm mt-2">Gagal memuat teks PDF atau PDF kosong. Pastikan PDF dapat diakses publik.</p>}
          </div>
        )}

        {currentMode === "askPdf" && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800">Tanya tentang PDF</h3>
            <textarea
              className="w-full p-3 border rounded-md focus:ring-blue-500 focus:border-blue-500"
              rows="4"
              placeholder="Ajukan pertanyaan Anda tentang materi PDF yang dipilih..."
              value={askPdfQuestion}
              onChange={(e) => setAskPdfQuestion(e.target.value)}
              disabled={!selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}
            ></textarea>
            <button
              onClick={handleAskPdfSubmit}
              className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 disabled:opacity-50"
              disabled={isLoading || !selectedMateriId || isPdfProcessing || !askPdfQuestion.trim() || !pdfTextContent.trim()}
            >
              Tanya AI
            </button>
          </div>
        )}

        {currentMode === "summarizePdf" && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800">Ringkas PDF</h3>
            <p className="text-sm text-gray-600">Klik tombol di bawah untuk mendapatkan ringkasan poin-poin penting dari materi PDF yang dipilih.</p>
            <button onClick={handleSummarizePdf} className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 disabled:opacity-50" disabled={isLoading || !selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}>
              Ringkas PDF
            </button>
          </div>
        )}

        {currentMode === "quiz" && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800">Buat Kuis dari PDF</h3>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Tipe Kuis:</label>
              <div className="flex gap-4">
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="quizType"
                    value="multipleChoice"
                    checked={quizType === "multipleChoice"}
                    onChange={(e) => setQuizType(e.target.value)}
                    className="form-radio text-blue-600"
                    disabled={!selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}
                  />
                  <span className="ml-2 text-gray-700">Pilihan Ganda</span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    name="quizType"
                    value="fillInTheBlank"
                    checked={quizType === "fillInTheBlank"}
                    onChange={(e) => setQuizType(e.target.value)}
                    className="form-radio text-blue-600"
                    disabled={!selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}
                  />
                  <span className="ml-2 text-gray-700">Isian Singkat</span>
                </label>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Jumlah Pertanyaan:</label>
              <select value={numQuestions} onChange={(e) => setNumQuestions(Number(e.target.value))} className="w-full p-2 border rounded-md shadow-sm" disabled={!selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}>
                {[3, 5, 10, 15].map((num) => (
                  <option key={num} value={num}>
                    {num}
                  </option>
                ))}
              </select>
            </div>
            <button onClick={handleGenerateQuiz} className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 disabled:opacity-50" disabled={isLoading || !selectedMateriId || isPdfProcessing || !pdfTextContent.trim()}>
              Generate Kuis
            </button>

            {/* Tampilan Kuis yang Digenerate */}
            {quizQuestions.length > 0 && (
              <div className="mt-6 p-4 bg-gray-50 rounded-md border border-gray-200">
                <h4 className="text-md font-semibold mb-3">Kuis Anda:</h4>
                {quizQuestions.map((q, index) => (
                  <div key={index} className="mb-4 p-3 border border-gray-200 rounded-md bg-white shadow-sm">
                    <p className="font-medium text-gray-800">
                      {index + 1}. {q.question}
                    </p>
                    {q.type === "multipleChoice" && (
                      <ul className="list-none mt-2 text-sm text-gray-700">
                        {" "}
                        {/* list-none untuk hapus bullet */}
                        {q.options.map((option, optIndex) => (
                          <li key={optIndex}>
                            {String.fromCharCode(65 + optIndex)}. {option}
                          </li>
                        ))}
                      </ul>
                    )}
                    <p className="mt-2 text-sm text-green-700">
                      <strong>Jawaban:</strong> {q.answer}
                    </p>
                  </div>
                ))}
                <button onClick={handleDownloadQuizPdf} className="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 mt-4 flex items-center justify-center">
                  <FaDownload className="mr-2" /> Unduh Kuis sebagai PDF
                </button>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Area Chat / Respon AI */}
      <div className="flex-1 flex flex-col bg-white shadow-lg md:ml-4 rounded-lg">
        <div className="p-4 bg-blue-700 text-white text-center text-xl font-semibold rounded-t-lg">Obrolan dengan UmmahPartner AI</div>
        <div ref={chatContainerRef} className="flex-1 p-6 overflow-y-auto space-y-4 bg-gray-50">
          {chatHistory.length === 0 ? (
            <div className="text-center text-gray-500 mt-10">
              Selamat datang di UmmahPartner AI!
              <br />
              Pilih mode di panel kiri untuk memulai.
            </div>
          ) : (
            chatHistory.map((msg, index) => (
              <div key={index} className={`flex items-start ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`max-w-[70%] p-3 rounded-lg shadow-md ${msg.role === "user" ? "bg-blue-500 text-white rounded-br-none" : "bg-gray-200 text-gray-800 rounded-bl-none"}`}>
                  <p className="font-semibold mb-1 flex items-center">
                    {msg.role === "user" ? (
                      <>
                        <FaUser className="mr-2" /> Anda
                      </>
                    ) : (
                      <>
                        <FaRobot className="mr-2" /> UmmahPartner
                      </>
                    )}
                    {/* Tombol Salin */}
                    <button onClick={() => handleCopyChat(msg.parts[0].text)} className="ml-auto text-gray-400 hover:text-white focus:outline-none" title="Salin pesan">
                      <FaCopy className="text-sm" />
                    </button>
                  </p>
                  {formatText(msg.parts[0].text)}
                </div>
              </div>
            ))
          )}
          {isLoading && (
            <div className="flex justify-start items-start">
              <div className="max-w-[70%] p-3 rounded-lg shadow-md bg-gray-200 text-gray-800 rounded-bl-none">
                <p className="font-semibold mb-1 flex items-center">
                  <FaRobot className="mr-2" /> UmmahPartner
                </p>
                <p className="flex items-center">
                  <FaSpinner className="animate-spin mr-2" /> Mengetik...
                </p>
              </div>
            </div>
          )}
        </div>
        {/* Input Chat Umum */}
        {currentMode === "chat" && (
          <form onSubmit={handleGeneralChatSubmit} className="p-4 border-t bg-white">
            <div className="flex items-center">
              <textarea
                className="flex-1 p-3 border rounded-lg resize-none focus:ring-blue-500 focus:border-blue-500 mr-2"
                rows="1"
                placeholder="Ketik pesan Anda..."
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    handleGeneralChatSubmit(e);
                  }
                }}
                disabled={isLoading}
              />
              <button type="submit" className="bg-blue-600 text-white p-3 rounded-full hover:bg-blue-700 disabled:opacity-50" disabled={isLoading || !inputMessage.trim()}>
                <FaPaperPlane />
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
